TITLE:: Playing with UGens 1
summary:: Software Systems for Music Technology
categories:: Tutorials/SSfMT
related:: SSfMT, SSfMT/Handbook#Course Materials#Course Materials, SSfMT/Practicals/Playing with UGens 2

section::UGens


Unit Generators or UGens are objects that generate numbers very fast and run in a lower level programming language (C++) for efficiency purposes. The numbers run at a sample level and are used for synthesis/analysis of audio. To see the available UGens (unit generators) evaluate the following:
code::
 	 UGen.dumpClassSubtree
::

Note:: UGens are objects, therefore they are written starting with Upper-case letters.::

UGens can run at audio rate (sampling rate - 44.1kz):
with the message code::.ar::

or control rate (64/sampling rate): with the message code::.kr::

Within a function, UGens can produce audio and control signals

Each UGen has a help file that explains what it does.

code::
SinOsc //select and cmd + d
::

subsection::Booting the Server

To get any sound from a UGen, first we have to boot the server.

Note::To boot server press emphasis::cmd + b::.::

Alternatively, you can boot the server by evaluating the following line of code:
code::
s.boot; //turns on the server on
s.quit; //to quit the server
::

subsection::UGen arguments

UGens tend to have default values for their arguments. To discover these, access the code which contains the list of arguments and their default values.
code::
SinOsc //select object and press cmd + i

{SinOsc.ar}.play
{SinOsc.ar(mul: 0.2)}.scope
::
strong::Remember::: to stop the sound: emphasis::cmd + . (period)::

Note::UGens need the messege code::.ar:: (for audio rate) or code::.kr:: (for control rate). You will want to use control rate for UGens that are controlling a parameter of another UGen (e.g. an oscillator used to modulate frequency of another one) and audio rate for UGens that will go through D/A conversion to produce sound::

To get help for SinOsc, select it and emphasis::cmd + d::.

UGens may have one or a list of arguments (10,2,3) that are written after the message and are separated by commas

code::
{SinOsc.ar(mul: 0.1)}.scope
{SinOsc.ar(220,0,0.3)}.scope //args: freq, phase, mul
::
To use different values for arguments, without specifying the value for the preceding ones, you may use the following notation:
code::
{SinOsc.ar(220, mul: 0.3)}.scope
::
instead of:
code::
{SinOsc.ar(220, 0, 0.3)}.scope
::

subsection::Printing UGen values

If you would like to print some of the values for a UGen, you can use the message code::.poll:::
code::
{SinOsc.kr(0.1).poll}.scope //posts values between -1 and 1
{SinOsc.ar(200).poll(50)}.scope //poll arg can be changed to set amount of val printed per second
::

note::The code::.poll:: message can be very useful for debugging::

subsection::Combining signals


The argument for a UGen can be another UGen:
code::
{Pulse.ar(Saw.kr(MouseX.kr(0.2,100), mul: 50, add: 400/4), 0.5, mul: SinOsc.kr(1, mul:0.5, add:1))}.scope;
::

A more simple example: here we modulate the frequency of code::SinOsc:: with another code::SinOsc::.

code::
{SinOsc.ar(SinOsc.kr(0.5,0,50,400),0,0.5)}.scope; //args: freq, phase, mul, add
::

strong::Discussion:::
list::
##code::mul:: can be seen as the emphasis::range::
##the values for code::SinOsc:: are between -1.0 and 1.0
##if code::mul == 4::, then they oscillate between -4.0 and 4.0
##code::add:: can be seen as the emphasis::center::
##normal values between -1.0 and 1.0
##code::add::, if code::add == 2::, then values between 1.0 and 3.0
##In the example above, the oscillator modulates between 350 Hz (400-50) and 450 Hz (400+50) every second.
::

Other examples of modulations with code::SicOsc::.
code::
{SinOsc.ar(SinOsc.kr(0.5,0,100,500),0,0.5)}.scope;
//mouse changes frequency of moduling oscillator:
{SinOsc.ar(SinOsc.kr(MouseX.kr(0.1, 10),0,100,500),0,0.5)}.scope;
::

code::LFNoise0:: produces emphasis::low frequency noise:::
code::
LFNoise0(freq,mul,add)   // freq is the frequency in which the values are generated

{LFNoise0.ar(10)}.scope

{Pulse.ar(LFNoise0.ar(10,100,150), mul:0.2)}.scope  // mul is the range, add is the center value
// freq between 400 and 600 Hz
::

strong::Adding 2 signals:::
code::
(
{ Saw.ar(400,0.3)
	+
  SinOsc.ar(120,0.3)
  }.scope
)
::

strong::Multiplying 2 signals:::
code::
(
{ Saw.ar(400)
	*
  Saw.ar(100)
  }.scope
)
::

The name of parameters can be specified if it helps to understand the organisation of the expression:
code::
(
{Pulse.ar (freq: LFNoise0.ar( freq: MouseX.kr(0.2,1000),
						   mul: 100,
						   add: 200),
		   mul: 0.3
		  )
}.scope
)
::

subsection::Multi-channel expansion (and contraction)

a collection (array) given to a parameter in a UGen results in a multi-channel output
code::
{SinOsc.ar(#[220,365])}.scope
::
Mix is an object that mixes a multi-channel output to one channel
code::
{Mix.ar(SinOsc.ar((100,400..1000),0,0.6/19))}.scope
::
The result is similar to:
code::
{ SinOsc.ar(220,mul: 0.3) + SinOsc.ar(365, mul: 0.3)}.scope
::

subsection::MouseX, MouseY

Arguments may be tested using MouseX and MouseY:

code::
MouseX.kr(minval, maxval, warp, lag)
    //warp curve is 0 for linear, 1 for exponential or 'linear', 'exponential'
    //lag dalays the mouse movement

{SinOsc.ar(MouseX.kr(100,2000),0,0.1)}.scope
{SinOsc.ar(MouseX.kr(100,2000, 'exponential'),0,0.1)}.scope
{SinOsc.ar(MouseX.kr(100,2000, 'exponential', 5),0,0.1)}.scope //lags mouse movement for 5 secs
::

Using MouseY too:

code::
(
{SinOsc.ar(freq: MouseX.kr(100,2000, 'exponential'),
	mul: MouseY.kr(0.1,0.01))  // in the upper part of the screen amp is higher
}.scope
)
::

subsection:XLine, Line

Controling values with XLine:
code::
	XLine (start, end, dur, mul, add, doneAction)  ar or kr
	//generates an exponential curve
	//start and end cannot be 0
	//duration in seconds
::
Note:: the last value stays unless one specifies to kill the sound with doneAction. The options for doneAction are explained in the code::EnvGen:: help file.::

code::doneAction::: frees the synth on the Server
code::
{SinOsc.ar(XLine.kr(100,2000,1),0,0.3)}.scope

{SinOsc.ar(XLine.kr(100,2000,1, doneAction: 2),0,0.1)}.scope
::
Line generates a lineal change:
code::
	Line (start, end, dur, mul, add, doneAction)  .ar or .kr

{SinOsc.ar(Line.kr(100,2000,10, doneAction: 2),0,0.1)}.scope
::


subsection::Envelopes - Env, EnvGen

Envelopes can be specified using Env

code::
Env.linen (1,2,1,0.6).plot
Env.linen (1,2,1,0.6).test
       linen (attackTime, sustainTime, releaseTime, level)
Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'exponential').plot
Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'exponential').test.plot
       Env.new([levels], [times], curve)
Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'sine').test.plot
Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'welch').test.plot
Env.new([0.001,1,0.3,0.001],[1,0.5,2], 4).test.plot
Env.new([0.001,1,0.3,0.001],[1,0.5,2], -4).test.plot

	Env.triangle (duration, level)     // triangle envelope
Env.triangle(1,1).test.plot

	Env.sine(duration,  level)     // Hanning window
Env.sine (1,1).test.plot

	Env.perc(attackTime, releaseTime,peakLevel, curve)
Env.perc(0.05,1,1,-4).test.plot

	cutoff(releaseTime, level, curve)   //no attack
Env.cutoff(1,1,'sine').test.plot
::

For more envelope examples see Env help file.

To generate envelopes, the code::Env:: UGen has to be used as an argument of code::EnvGen::
list::
##(envelope, gate, levelScale, levelBias, timeScale, doneAction)
##envelope - an instance of code:: Env::
##gate control signal that keeps code:: EnvGen :: open
::
code::
{ EnvGen.kr(Env.linen(1,2,1,0.6),doneAction: 2) * BrownNoise.ar}.scope

(
{ EnvGen.kr(Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'exponential'),
	doneAction: 2)
* BrownNoise.ar}.scope
)
::
Instead of typing the code::EnvGen:: UGen, it is possible to add the code::.kr:: message after code::Env::.
list::
##The arguments of the code::.kr:: message for code::Env:: are in slightly order to EnvGen: ##(doneAction, gate, timeScale, mul, add).
::
Therefore, this code will result in the same as the above:
code::
{ Env.linen(1,2,1,0.6).kr(2) * BrownNoise.ar}.scope

(
{ Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'exp').kr(2)
* BrownNoise.ar}.scope
)
::
envelope for frequency:
code::
(
{	Blip.ar(Env.new([1000,500,400,200],[5,2,3],'sine').kr(2), mul: 0.1)
}.scope
)

::

subsection::Remember variables?

Variables can be used to break the algorithm into separate lines of code. Note that the
lines of code end with a semicolon (that is how the expressions are divided.) Variables have to be inside the expression and have to be evaluated within it (if we evaluate the following piece of code line by line it produces error = we need to evaluate the whole piece of code for it to work).

code::
(
	var envelope, freq = 200;

	envelope = Env.new([0.001,1,0.3,0.001],[1,0.5,2], 'exp');

 {envelope.kr(2) * SinOsc.ar(freq,0,0.5)}.scope;
)
::
or
code::
(
{	var envelope, freq = 200;

	envelope = Env([0.001,1,0.3,0.001],[1,0.5,2], 'exp').kr(2);

	envelope * SinOsc.ar(freq,0,0.5)
}.scope
)
::

subsection::Remember Global Variables?

Variables can be local or global. Variables that are local and have to be declared. Global variables can be declared and accessed wherever and whenever, regardless where they are in a piece of code or when they are declared. Global variables can be letters a-z (stored in the interpreter), but may also be written using code::~:: before a written variable.

code::
Example:

~cuatro = 4;
~cinco = 5;

~cuatro + ~cinco;
::


These type of global variables are stored in an Environment. If you want to clear the enviroment you can by evaluating the following piece of code:
code::
currentEnvironment.clear;

~cuatro
~cinco
::

For more information about environments select and emphasis::cmd + d::

code::
Environment
::

subsection::Random sine waves

Fill an array for random frequencies:

code::
Array.fill(10,1.0.rand)  // fills an array with the same random value
Array.fill(10,{1.0.rand})  // fills an array with different values
::

Another way of doing the same:
code::
{1.0.rand}.dup(10)    // dup duplicates an array produced by a function several times
{1.00.rand} ! 10      // ! same as dup (ver SymbolicNotations)

[1,0.5,0.3].normalizeSum //normalizes an array:

(
{
var harmArray, ampArray, fund,num; //variable declaration
fund = 100;
num = 20;
harmArray ={rrand(1.0, 20)} ! num;  // an array of num amount of values
ampArray = {1.0.rand}.dup(num).normalizeSum; //normalize the array so that amp is not too much
Mix.ar(SinOsc.ar(harmArray * fund, 0, ampArray));
}.scope
)
::

We add an envelope to the random frequencies:
code::
(
{
var harmArray, ampArray, fund,n,env;
fund = 100;
n = 20;
harmArray ={rrand(1,20.0)} ! n;
ampArray = {1.0.rand}.dup(n).normalizeSum;
env = Env.linen(1,10,3,0.6).kr(2); //Lineal envelope
Mix.ar(SinOsc.ar(harmArray * fund, 0, ampArray) * env);
}.scope;
)
::

a different envelope for each frequency:
code::
(
{
var harmArray, ampArray, fund,n,env; fund = 100;
n = 20;
harmArray ={rrand(1.0,20)}! n;
ampArray = {1.0.rand}.dup(n).normalizeSum;
env = {Env.linen(rrand(1,10.0).postln,10,3,0.6).kr} ! n;
Mix.ar(SinOsc.ar(harmArray * fund, 0, ampArray) * env);
}.scope;
)
::

Another way duplicate the whole function:
code::
(
{
var harmArray, ampArray, fund,n; fund = 100;
n = 20;
Mix.ar({SinOsc.ar(rrand(1,20.0) * fund, 0, 0.3.rand) *
	Env.linen(rrand(1.0,10),rrand(5.0,10),3,0.2).kr} ! n);
}.scope;
)
::

subsection::Noise
code::
WhiteNoise.dumpClassSubtree //different types of Noise

{WhiteNoise.ar(0.5)}.scope
{PinkNoise.ar(0.5)}.scope
{BrownNoise.ar(0.5)}.scope
{GrayNoise.ar(0.5)}.scope

Impulse.ar(freq, phase, mul, add) // Random impulses
{Impulse.ar(MouseX.kr(1,500))}.scope

Dust.ar(density, mul, add) // random impulses
{Dust.ar(MouseX.kr(10,500))}.scope
::

code::Dust:: as trigger of an envelope. The argument gate activates when the signal is > (greater than) 0 :
code::
Env.perc(0.001,0.05).plot;

(
{	SinOsc.ar(440, mul: Env.perc(0.001,1.0).kr(
	gate: Dust.kr(MouseX.kr(0.5,5))))
}.scope
)
::

subsection::Filters

code::Filter.dumpClassSubtree::

RLPF: resonant low pass filter
RHPF:   resonant high pass filter
BPF:  bandpass filter
code::
RLPF.ar(in, freq, rq, mul, add)
::

Freq is the cuttoffFreq, rq is the reciprocal of Q: bandwidth/cutoffFreq
code::
{RLPF.ar(WhiteNoise.ar,500,0.1)}.scope
{RLPF.ar(WhiteNoise.ar,500,0.9)}.scope
{RLPF.ar(WhiteNoise.ar,MouseX.kr(200,2000,0, 0.5),MouseY.kr(0.01,0.5,0, 0.5))}.scope
// MouseX is cutoff freq and MouseY is rq
::

BPF - 2nd order Butterworth bandpass filter
code::
{ BPF.ar(WhiteNoise.ar,MouseX.kr(200,2000,0, 0.5),MouseY.kr(0.01,0.5,0, 0.5))}.scope
::

code::Resonz:: - resonant filter
code::
Resonz.ar(in,freq,rq, mul,add)

{Resonz.ar(WhiteNoise.ar(0.5),2000,0.1)}.scope

// modulate bandwidth
{ Resonz.ar(WhiteNoise.ar(0.5), 2000, XLine.kr(1, 0.001, 8)) }.play

(
  {Resonz.ar(WhiteNoise.ar(0.3),2000,0.1)
  +
  Resonz.ar(WhiteNoise.ar(0.3),1207,0.1)
  +
 Resonz.ar(WhiteNoise.ar(0.3),387,0.1)}.scope;
)
::

strong::Excercise:::

Go  on a tour of SuperCollider UGens:

code::Tour_of_UGens:: (select and emphasis::cmd+d::)

Note::
Various examples, ideas, etc. have been taken or derived from the SC documentation, Paul Berg, David Cottle, Nick Collins, and probably lots of other people in the SuperCollider community.
::