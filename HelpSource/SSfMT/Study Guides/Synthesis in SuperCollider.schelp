TITLE:: Synthesis in SuperCollider
summary:: Software Systems for Music Technology
categories:: Tutorials/SSfMT
related:: SSfMT, SSfMT/Practicals/Playing with UGens 1, SSfMT/Practicals/Playing with UGens 2

section::Signals and Fixed Waveforms

subsection::Basic arithmetic operations on signals
list::
##When we emphasis::multiply:: a signal by a number, we change its emphasis::amplitude::
##When we emphasis::add:: a number, we change its emphasis::axis::
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/signalaxis.png#sine wave plot::

list::
##We can use a signal to modulate another signal
##We can modulate any parameter of a given signal (frequency, amplitude, phase, etc.)
##We can also add two signals together (additive synthesis)
##We can also multiply two signals (ring modulation)
::

subsection::Common periodic waveforms

The most common periodic fixed (waveform doesn't change in time) waveforms in classic synthesis are:
list::
##Sine Wave
##Square Wave
##Saw Wave
##Triangle Wave
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/common waves.png#Common waveforms in synthesis::

They have different characteristics and complex waves (Square, Saw, Triangle).

strong::Square Wave::

list::
##Odd harmonics
##Amplitude of each harmonic is multiplied by emphasis::1/harmonicNum::
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/squarewave.png#Square Wave::

code::
FreqScope.new(400, 200, 0); //frequency scope

(
{var sinArr, size, freq, array;
sinArr = [];
size = 100; //try replacing with low number like 4
freq = 100;
array = Array.series(size,1,2); //odd harmonics
array.do{|item|
sinArr = sinArr.add(SinOsc.ar(freq * item,0,0.5*(1/item))); // 1/harmonicNum
};
sinArr.sum;
}.scope;
)
::

Note::This approach is for demonstration purposes. Use the code::UGen:: below if you just want to use a square wave::

SC has a square wave code::UGen:::
code::
{Pulse.ar(100, 0.5, 1, 0)}.scope//args: freq, width, mul, add
::

strong::Saw Wave::
list::
##Odd and even harmonics
##Amplitude of each harmonic is multiplied by emphasis::1/harmonicNum/2::
::
image::http://federicoreuben.com/computerdotplay/guides/guide2/sawwave.png#Saw Wave::

code::
(
{var sinArr, size, freq;
sinArr = [];
size = 100; //try replacing with low number like 4
freq = 100;
(Array.series(size,1,1)).do{|item|
sinArr = sinArr.add(SinOsc.ar(freq * item,0,0.5*(1/item/2)));
};
sinArr.sum;
}.scope;
)
::

Note::This approach is for demonstration purposes. Use the UGen below if you just want to use a saw wave::

SC has a saw wave code::UGen:::
code::
{Saw.ar(100, 1, 0)}.scope//args: freq, mul, add
::

strong::Triangle Wave::
list::
##Odd harmonics
##Amplitude of each harmonic is multiplied by emphasis::1/harmonicNum/harmonicNum::
##Polarity switches from positive to negative amplitude from harmonic to harmonic::

image::http://federicoreuben.com/computerdotplay/guides/guide2/trianglewave.png#Triangle Wave::

code::
(
{var sinArr, size, freq;
sinArr = [];
size = 100; //try replacing with low number like 4
freq = 100;
(Array.series(size,1,2)).do{|item, index|
if(index.even, {
sinArr = sinArr.add(SinOsc.ar(freq * item,0,0.5*(1/item/item)));
}, {
sinArr = sinArr.add(SinOsc.ar(freq * item,0,(0.5*(1/item/item)).neg));
});
};
sinArr.sum;
}.scope;
)
::

Note::This approach is for demonstration purposes. Use the code::UGen:: below if you just want to use a triangle wave::

SC has a triangle wave code::UGen:::
code::
{LFTri.ar(100, 0, 1, 0)}.scope//args: freq, iphase, mul, add
::

section::Time-varying Waveform Synthesis

Changing amplitude of a signal in time is important to make it interesting!
	For this, we need:
list::
##Signals to create time-varying waveforms
##Envelopes - functions of time (generates a line through a table specifying time and amplitude points)
##Amplitude envelopes need to be multiplied with the “sounding” signal
##Introducing time-varying UGens in a patch both in amplitude and frequency for more interesting results
##Table-look up oscillators have 3 different inputs: amplitude, frequency and waveform
::

subsection::Envelopes
list::
##An envelope is a function in time that describes a line or curve
##Commercial synthesisers amplitude envelopes in 4 stages
##Attack, Decay, Sustain and Release (ADSR)
##We still need a way of using the envelope to modify the amplitude of the “constant sounding” oscillator
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/adsr.png#ADSR Envelope::

Note::It's important to understand that in the digital domain, an Envelope specifies a wavetable::

In SC we can make envelopes with the code::Env:: specification.
code::
Env([0,1,0], [1,9]).plot; //values, time
Env.adsr.plot;
Env.adsr(0.1,1,0.01).plot;
::

Another more complex curved envelope:
code::
a = Array.fill(29, {rrand(0.0,1)});
d = Array.fill(29, {rrand(0.1,0.5)}).sort;
a = a ++ [0];
c = Env(a,d, curve:'sin');
c.test.plot;
::


strong::Envelopes Generators::

In order to playback envelopes in synthesis patches, we need to use an strong::envelope generator::, which reads the breakpoints we create with an Env.

image::http://federicoreuben.com/computerdotplay/guides/guide2/envgen.png#A synthesis patch with an envelope generator::

In SC, we use the code::EnvGen:: UGen for this purpose.
code::
a = Array.fill(29, {rrand(0.0,1)});
d = Array.fill(29, {rrand(0.1,0.5)}).sort;
a = a ++ [0];
c = Env(a,d, curve:'sin');
{PinkNoise.ar(1)*c.kr(2);}.play;
::

Now use envelope to control frequency:

code::
	{LFTri.ar(c.kr(2).linlin(0,1,200,2000))*c.kr(2);}.play;
//example from above with same envelope
	{LFNoise1.ar(c.kr(2).linlin(0,1,200,2000))*c.kr(2);}.play;
::

	note::
	The message code::.linlin:: scales numbers between two ranges of values specified as the arugments code:: inMin, inMax, outMin, outMax::
	::
section::Subtractive Synthesis
list::
##Method of Sound Synthesis
##Frequencies are attenuated by using digital filters
##Usually source rich in frequency content/partials/harmonics
##Sources may include: Complex waves (such as saw (code::Saw.ar::), square (code::Pulse.ar::), triangle (code::LFTri.ar::)), noises, pulses, etc.
##Resonance can be used to create interesting effects like ringing
##Subtract and add methods
::

section::Noise

image::http://24.media.tumblr.com/tumblr_mch0831jxO1rf089no1_1280.gif#NOISE!! - 24.media.tumblr.com::

list::
##Noise in signal processing may refer to two things:
##Unwanted modification of signal (unwanted sounds)
##Or (what we are interested now):
##Aperiodic signals
##Random signals
##However with predictable spectral density
##Predictably unpredictable...
::

subsection::Coloured Noise

Noise with different spectral characteristics.

strong::White Noise::
list::
##Flat frequency spectrum
##Equal power in any band of a given bandwidth (power spectral density)
::
image::http://federicoreuben.com/computerdotplay/guides/guide2/whitenoise.png#White Noise::
code::
{WhiteNoise.ar(0.5)!2}.scope;
::
strong::Pink Noise::
list::
##Flat frequency spectrum
##Equal power in any band of a given bandwidth (power spectral density)
::
image::http://federicoreuben.com/computerdotplay/guides/guide2/pinknoise.png#Pink Noise::
code::
{PinkNoise.ar(0.5)!2}.scope
::
strong::Brown Noise::
list::
##Brownian motion
##Random walk
##Power density decreases 6dB per octave with increasing frequency
##More power in lower frequencies
::
image::http://federicoreuben.com/computerdotplay/guides/guide2/brownnoise.png#Brown Noise::
code::
{BrownNoise.ar(0.5)!2}.scope
::
strong::Grey Noise::
list::
##White noise subjected to psychoacoustic equal loudness curve
##Closer to how we hear
::
image::http://federicoreuben.com/computerdotplay/guides/guide2/greynoise.png#Grey Noise::
code::
{GrayNoise.ar(0.5)!2}.scope
::

subsection::Filters

image::http://federicoreuben.com/computerdotplay/guides/guide2/filters.png#Filters remove stuff!::

list::
##“A digital filter is a computational process or algorithm by which a digital signal or sequence of numbers (acting as input) is transformed into a second sequence of numbers termed the output digital signal” (Rabiner et al. 1972)
##Any digital device with an input and an output is a filter!
##Commonly referred to devices that boost or attenuate regions of the frequency spectrum
##Not only frequency domain, but also time domain (reverbs, delays, etc.)
::

subsection::Pass Filters


code::WhiteNoise:: as source.
code::

{WhiteNoise.ar(1)!2}.scope;

FreqScope.new(400, 200, 0); //frequency scope
::


strong::Hi-pass filter::: Just passes high frequencies.

image::http://federicoreuben.com/computerdotplay/guides/guide2/hpf.png#High-pass Filter::

code::
{HPF.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000))}.scope
::

strong::Low pass filter::: Just passes low frequencies.

image::http://federicoreuben.com/computerdotplay/guides/guide2/lpf.png#Low-pass Filter::

code::
{LPF.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000))}.scope //args: in, freq, rq
::

strong::Band pass filter::: Just Passes Band

image::http://federicoreuben.com/computerdotplay/guides/guide2/bpf.png#Band-pass Filter::

code::
{BPF.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(440,17600), MouseY.kr(0.001,0.9))}.scope //args: in, freq, rq
::

strong::Band reject filter::: Rejects band

image::http://federicoreuben.com/computerdotplay/guides/guide2/brf.png#Band-reject Filter::

code::
{BRF.ar(WhiteNoise.ar(0.5)!2, 11000, MouseY.kr(0.01,1.9))}.scope
::

subsection::Resonant Filters
list::
##Resonance provides a boost around cut-off frequency
##Sometimes you find the reciprocal of Q (1/Q) instead of Q
##RHPF (Resonant High Pass Filter)
##RLPF (Resonant Low Pass Filter)
::

strong::Resonant low pass filter:::
code::
{RLPF.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.001,0.9))}.scope
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/rlpf.png#Resonant Low-pass Filter::

strong::Resonant high pass filter:::
code::
{RHPF.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.001,0.9))}.scope
::

image::http://federicoreuben.com/computerdotplay/guides/guide2/rhpf.png#Resonant High-pass Filter::


subsection::Equalisation

B EQ Filters in SC:

strong::High-pass:::
code::
{Pan2.ar(BHiPass.ar(WhiteNoise.ar(0.5), MouseX.kr(20,22000)),0)}.scope
::
strong::Low-pass:::
code::
{Pan2.ar(BLowPass.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000)),0)}.scope
::

note::The code::Pan2:: UGen is an equal power stereo panner, the second argument is position between -1 and 1::

strong::Shelf Filters:::

image::http://federicoreuben.com/computerdotplay/guides/guide2/shelf.png#Low and High Shelf Filters::

strong::Low-shelf:::

Cut -20db:
code::
{Pan2.ar(BLowShelf.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), -20), 0)}.scope //arg: in, freq. reciprocal of s (slope) = 1/s
::
Boost 20db:
code::
{Pan2.ar(BLowShelf.ar(WhiteNoise.ar(0.1)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), 20), 0)}.scope //reciprocal of s (slope) = 1/s
::

strong::Hi-shelf:::

Cut -10db:
code::
{Pan2.ar(BHiShelf.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), -10), 0)}.scope //reciprocal of s (slope) = 1/s
::

Cut -20db:
code::
{Pan2.ar(BHiShelf.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), -20),0)}.scope
::

Boost 10db:
code::
{Pan2.ar(BHiShelf.ar(WhiteNoise.ar(0.25)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), 10),0)}.scope
::
Boost 20db:
code::
{Pan2.ar(BHiShelf.ar(WhiteNoise.ar(0.1)!2, MouseX.kr(20,22000), MouseY.kr(0.5,10.0), 20), 0)}.scope
::


strong::Parametric:::

image::http://federicoreuben.com/computerdotplay/guides/guide2/parametric.png#Parametric Filter - Boost and Cut::

Cut -10db:
code::
{Pan2.ar(BPeakEQ.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000,1).poll, MouseY.kr(0.1,10.0), -10),0)}.scope //reciprocal of q (bandwidth / cutoffFreq)
::

Cut -20db:
code::
{Pan2.ar(BPeakEQ.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000,1).poll, MouseY.kr(0.1,10.0), -20),0)}.scope //reciprocal of q (bandwidth / cutoffFreq)
::

Boost 10db:
code::
{Pan2.ar(BPeakEQ.ar(WhiteNoise.ar(0.25)!2, MouseX.kr(20,22000,1).poll, MouseY.kr(0.1,10.0), 10),0)}.scope //reciprocal of q (bandwidth / cutoffFreq)
::
Boost 20db:
code::
{Pan2.ar(BPeakEQ.ar(WhiteNoise.ar(0.1)!2, MouseX.kr(20,22000,1).poll, MouseY.kr(0.1,10.0), 20),0)}.scope //reciprocal of q (bandwidth / cutoffFreq)
::

strong::Multiband EQ::

image::http://federicoreuben.com/computerdotplay/guides/guide2/multiband.png#Multiband Filter by fabfilter::

By combining different filters, you can produce a multiband EQ.

code::
(
a = {arg lag=10, hpfreq=100,hpq=0.71,lsfreq=80,lsdb=10,lss=1.1,p1freq=43,p1db=0,
	p1q=6,p2freq=86,p2db=0,p2q=6,p3freq=129,p3db=0,p3q=6,p4freq=172,p4db=0,
	p4q=6,hsfreq=2000,hsdb=0,hss=0.1,lpfreq=20000,lpq=0.71,byp1=0,byp2=0,
	byp3=0,byp4=0,byp5=0,byp6=0,byp7=0,byp8=0,vol=0.5;
	var signal;
	signal = WhiteNoise.ar(0.25);
	signal = BHiPass.ar(signal,hpfreq.lag(lag),(1/hpq.lag(lag)))*byp1.linlin(0,1,1,0) + (signal*byp1);
	signal = BLowShelf.ar(signal,lsfreq.lag(lag),(1/lss.lag(lag)), lsdb.lag(lag))*byp2.linlin(0,1,1,0)
	+ (signal*byp2);
	signal = BPeakEQ.ar(signal,p1freq.lag(lag),(1/p1q.lag(lag)), p1db.lag(lag))*byp3.linlin(0,1,1,0)
	+ (signal*byp3);
	signal = BPeakEQ.ar(signal,p2freq.lag(lag),(1/p2q.lag(lag)),p2db.lag(lag))*byp4.linlin(0,1,1,0)
	+ (signal*byp4);
	signal = BPeakEQ.ar(signal,p3freq.lag(lag),(1/p3q.lag(lag)),p3db.lag(lag))*byp5.linlin(0,1,1,0)
	+ (signal*byp5);
	signal = BPeakEQ.ar(signal,p4freq.lag(lag),(1/p4q.lag(lag)),p4db.lag(lag))*byp6.linlin(0,1,1,0)
	+ (signal*byp6);
	signal = BHiShelf.ar(signal,hsfreq.lag(lag),(1/hss.lag(lag)), hsdb.lag(lag))*byp7.linlin(0,1,1,0)
	+ (signal*byp7);
	signal = BLowPass.ar(signal,lpfreq.lag(lag),(1/lpq.lag(lag)))*byp8.linlin(0,1,1,0)
	+ (signal*byp8);
	Pan2.ar(signal,0)*vol;
}.scope;
)

//the lag message/argument produces a linear ramp between values at a given duration
a.set(\p1db,20, \p1q,10.0, \p1freq, 800);
a.set(\p2db,20, \p2q,10.0, \p2freq, 800*2);
a.set(\p3db,20, \p3q,10.0, \p3freq, 800*3);
a.set(\p4db,20, \p4q,10.0, \p4freq, 800*4);

a.set(\byp1, 1, \lsfreq, 82,\lsdb,10,\lss,0.2,\p1freq,220,\p1db, -10);

a.set(\hpfreq, 440, \hpq, 6)
::

subsection::Resonance and ringing

Resonance exhibits ringing.

code::
{Resonz.ar(WhiteNoise.ar(0.5)!2, MouseX.kr(20,22000), MouseY.kr(0.001,0.9))}.scope //resonant high

{Impulse.ar(MouseX.kr(0.5,10))!2*0.5}.scope

{Resonz.ar(Impulse.ar(1,0,20), MouseX.kr(440,10000), MouseY.kr(0.0001,0.01))!2*10}.scope //resonant filter ringing

{Ringz.ar(Impulse.ar(1,0,1), MouseX.kr(440,10000), 0.5)!2 }.scope //same but specify ring times
::
code::Klank:: and code::DynKlank:: are banks of resonators in SC.
code::
(
{
Klank.ar([ // the multichannel-expansion
	    `[[500, 1078, 1201.5, 1723], nil, [1, 1, 0.5, 0.3]], // left channel
	    `[[700, 1071, 1053, 1723], nil, [1, 1, 1, 1]] // right channel
    ], Impulse.ar([1.5, 1.875], 0, 0.1))
}.play
)
::
With code::DynKlank:: you can change parameters dynamically.
code::
(
// change freqs and ringtimes with mouse
{    var freqs, ringtimes;
    freqs = [800, 1071, 1153, 1723] * MouseX.kr(0.5, 2, 1);
    ringtimes = [1, 1, 1, 1] * MouseY.kr(0.1, 10, 1);
    DynKlank.ar(`[freqs, nil, ringtimes ], Impulse.ar(2, 0, 0.1))
}.play;
)

(
// set them from outside later with Control UGen:
a = {
    var freqs, ringtimes;
    freqs = Control.names([\freqs]).kr([800, 1071, 1153, 1723]);
    ringtimes = Control.names([\ringtimes]).kr([1, 1, 1, 1]);
    DynKlank.ar(`[freqs, nil, ringtimes ], Impulse.ar(2, 0, 0.1));
		}.play
)

a.setn(\freqs, Array.rand(4, 500, 2000));
a.setn(\ringtimes, Array.rand(4, 0.2, 4) );
::

